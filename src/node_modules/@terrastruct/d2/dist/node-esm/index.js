import{a as i,b as c}from"./chunk-ctcfg68w.js";var l=null;async function u(){if(!l)l={fs:await import("fs/promises"),path:await import("path"),url:await import("url"),worker:await import("worker_threads")};return l}async function d(r){let t=await u(),s=t.fs.readFile,{join:e,dirname:n}=t.path,{fileURLToPath:o}=t.url,a=n(o(import.meta.url));try{return await s(e(a,r))}catch(w){if(w.code==="ENOENT")return await s(e(a,"../../../wasm",r.replace("./","")));throw w}}async function m(){let r=await u(),{Worker:t}=r.worker,{join:s,dirname:e}=r.path,{fileURLToPath:n}=r.url,o=e(n(import.meta.url)),a=s(o,"worker.js");return new t(a)}class p{constructor(){this.ready=this.init()}setupMessageHandler(){let r=typeof window==="undefined";return new Promise((t,s)=>{if(r)this.worker.on("message",(e)=>{if(e.type==="ready")t();if(e.type==="error")s(new Error(e.error));if(e.type==="result"&&this.currentResolve)this.currentResolve(e.data);if(e.type==="error"&&this.currentReject)this.currentReject(new Error(e.error))});else this.worker.onmessage=(e)=>{if(e.data.type==="ready")t();if(e.data.type==="error")s(new Error(e.data.error));if(e.data.type==="result"&&this.currentResolve)this.currentResolve(e.data.data);if(e.data.type==="error"&&this.currentReject)this.currentReject(new Error(e.data.error))}})}async init(){this.worker=await m();let r=await d("./elk.js"),t=await d("./wasm_exec.js"),s=await d("./d2.wasm"),e=typeof window==="undefined",n=this.setupMessageHandler();if(e)this.worker.on("error",(o)=>{console.error("Worker (node) encountered an error:",o.message||o)});else this.worker.onerror=(o)=>{console.error("Worker encountered an error:",o.message||o)};return this.worker.postMessage({type:"init",data:{wasm:s,wasmExecContent:e?t.toString():null,elkContent:e?r.toString():null,wasmExecUrl:e?null:URL.createObjectURL(new Blob([t],{type:"application/javascript"}))}}),n}async sendMessage(r,t){return await this.ready,new Promise((s,e)=>{this.currentResolve=s,this.currentReject=e,this.worker.postMessage({type:r,data:t})})}async compile(r,t={}){let s=typeof r==="string"?{fs:{index:r},options:t}:{...r,options:{...t,...r.options}};return this.sendMessage("compile",s)}async render(r,t={}){return this.sendMessage("render",{diagram:r,options:t})}async encode(r){return this.sendMessage("encode",r)}async decode(r){return this.sendMessage("decode",r)}}export{p as D2};
