import"./chunk-ctcfg68w.js";import{parentPort as d}from"node:worker_threads";var a,n,i;function l(isNode,port,initWasm){a=port;let handleMessage=async(e)=>{let{type,data}=e;switch(type){case"init":try{if(isNode)eval(data.wasmExecContent),eval(data.elkContent);n=await initWasm(data.wasm),i=new ELK,a.postMessage({type:"ready"})}catch(t){a.postMessage({type:"error",error:t.message})}break;case"compile":try{if(data.options.layout==="elk"||data.options.layout==null){let s=await n.getELKGraph(JSON.stringify(data)),o=JSON.parse(s);if(o.error)throw new Error(o.error.message);let c=o.data,p=await i.layout(c);globalThis.elkResult=p}let t=await n.compile(JSON.stringify(data)),r=JSON.parse(t);if(r.error)throw new Error(r.error.message);a.postMessage({type:"result",data:r.data})}catch(t){a.postMessage({type:"error",error:t.message})}break;case"render":try{let t=await n.render(JSON.stringify(data)),r=JSON.parse(t);if(r.error)throw new Error(r.error.message);let s=new TextDecoder().decode(Uint8Array.from(atob(r.data),(o)=>o.charCodeAt(0)));a.postMessage({type:"result",data:s})}catch(t){a.postMessage({type:"error",error:t.message})}break}};if(isNode)port.on("message",handleMessage);else port.onmessage=(t)=>handleMessage(t.data)}async function g(t){let r=new Go,s=await WebAssembly.instantiate(t,r.importObject);return r.run(s.instance),global.d2}l(!0,d,g);export{l as setupMessageHandler};
